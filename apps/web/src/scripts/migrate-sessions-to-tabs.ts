/**
 * Script de migration pour initialiser les propri√©t√©s d'onglets
 * sur les sessions de chat existantes
 */

import { createClient } from '@/lib/supabase/server'

interface ChatSession {
  id: string
  title: string | null
  tab_order: number | null
  is_active: boolean | null
  is_dirty: boolean | null
  user_id: string
  workspace_id: string
}

export async function migrateSessions() {
  const supabase = await createClient()
  
  try {
    // R√©cup√©rer toutes les sessions sans propri√©t√©s d'onglets d√©finies
    const { data: sessions, error: fetchError } = await supabase
      .from('chat_sessions')
      .select('id, title, tab_order, is_active, is_dirty, user_id, workspace_id')
      .or('tab_order.is.null,is_active.is.null,is_dirty.is.null')

    if (fetchError) {
      throw new Error(`Erreur lors de la r√©cup√©ration: ${fetchError.message}`)
    }

    if (!sessions || sessions.length === 0) {
      console.log('‚úÖ Aucune session √† migrer')
      return
    }

    console.log(`üîÑ Migration de ${sessions.length} sessions...`)

    // Grouper par utilisateur et workspace pour d√©finir l'ordre
    const sessionsByUserWorkspace = sessions.reduce((acc, session) => {
      const key = `${session.user_id}-${session.workspace_id}`
      if (!acc[key]) {
        acc[key] = []
      }
      acc[key].push(session)
      return acc
    }, {} as Record<string, ChatSession[]>)

    // Migrer chaque groupe
    for (const [key, groupSessions] of Object.entries(sessionsByUserWorkspace)) {
      console.log(`üìù Migration du groupe ${key} (${groupSessions.length} sessions)`)

      for (let i = 0; i < groupSessions.length; i++) {
        const session = groupSessions[i]
        const isFirstSession = i === 0

        const updates: Partial<ChatSession> = {}

        // D√©finir tab_order si non d√©fini
        if (session.tab_order === null) {
          updates.tab_order = i
        }

        // D√©finir is_active si non d√©fini (seule la premi√®re session sera active)
        if (session.is_active === null) {
          updates.is_active = isFirstSession
        }

        // D√©finir is_dirty si non d√©fini
        if (session.is_dirty === null) {
          updates.is_dirty = false
        }

        // D√©finir title si non d√©fini
        if (!session.title) {
          updates.title = `Conversation ${i + 1}`
        }

        // Appliquer les mises √† jour si n√©cessaire
        if (Object.keys(updates).length > 0) {
          const { error: updateError } = await supabase
            .from('chat_sessions')
            .update(updates)
            .eq('id', session.id)

          if (updateError) {
            console.error(`‚ùå Erreur lors de la mise √† jour de ${session.id}:`, updateError)
          } else {
            console.log(`‚úÖ Session ${session.id} mise √† jour`)
          }
        }
      }
    }

    console.log('üéâ Migration termin√©e avec succ√®s!')

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    throw error
  }
}

// Ex√©cuter si appel√© directement
if (typeof window === 'undefined' && require.main === module) {
  migrateSessions()
    .then(() => {
      console.log('Migration termin√©e')
      process.exit(0)
    })
    .catch((error) => {
      console.error('√âchec de la migration:', error)
      process.exit(1)
    })
}
